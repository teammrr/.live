import { SvelteComponentTyped } from "svelte";
import { fly, scale } from 'svelte/transition';
import { type Transition, type TransitionParams } from '../../index.js';
type FlyTransition = typeof fly;
type ScaleTransition = typeof scale;
declare class __sveltets_Render<ListTransitionIn extends Transition = FlyTransition, ListTransitionOut extends Transition = FlyTransition, ChipTransitionIn extends Transition = ScaleTransition, ChipTransitionOut extends Transition = ScaleTransition> {
    props(): {
        [x: string]: any;
        input?: string | undefined;
        name: string;
        value?: any[] | undefined;
        whitelist?: string[] | undefined;
        max?: number | undefined;
        minlength?: number | undefined;
        maxlength?: number | undefined;
        allowUpperCase?: boolean | undefined;
        allowDuplicates?: boolean | undefined;
        validation?: ((...args: any[]) => boolean) | undefined;
        duration?: number | undefined;
        required?: boolean | undefined;
        chips?: string | undefined;
        invalid?: string | undefined;
        padding?: string | undefined;
        rounded?: string | undefined;
        transitions?: boolean | undefined;
        listTransitionIn?: ListTransitionIn | undefined;
        listTransitionInParams?: TransitionParams<ListTransitionIn> | undefined;
        listTransitionOut?: ListTransitionOut | undefined;
        listTransitionOutParams?: TransitionParams<ListTransitionOut> | undefined;
        chipTransitionIn?: ChipTransitionIn | undefined;
        chipTransitionInParams?: TransitionParams<ChipTransitionIn> | undefined;
        chipTransitionOut?: ChipTransitionOut | undefined;
        chipTransitionOutParams?: TransitionParams<ChipTransitionOut> | undefined;
    };
    events(): {
        input: Event;
        focus: FocusEvent;
        blur: FocusEvent;
        click: MouseEvent;
        keypress: KeyboardEvent;
        keydown: KeyboardEvent;
        keyup: KeyboardEvent;
        add: CustomEvent<{
            event: SubmitEvent;
            chipIndex: number;
            chipValue: string;
        }>;
        remove: CustomEvent<{
            event: MouseEvent;
            chipIndex: number;
            chipValue: string;
        }>;
        invalid: CustomEvent<{
            event: SubmitEvent;
            input: string;
        }>;
    } & {
        [evt: string]: CustomEvent<any>;
    };
    slots(): {};
}
export type InputChipProps<ListTransitionIn extends Transition = FlyTransition, ListTransitionOut extends Transition = FlyTransition, ChipTransitionIn extends Transition = ScaleTransition, ChipTransitionOut extends Transition = ScaleTransition> = ReturnType<__sveltets_Render<ListTransitionIn, ListTransitionOut, ChipTransitionIn, ChipTransitionOut>['props']>;
export type InputChipEvents<ListTransitionIn extends Transition = FlyTransition, ListTransitionOut extends Transition = FlyTransition, ChipTransitionIn extends Transition = ScaleTransition, ChipTransitionOut extends Transition = ScaleTransition> = ReturnType<__sveltets_Render<ListTransitionIn, ListTransitionOut, ChipTransitionIn, ChipTransitionOut>['events']>;
export type InputChipSlots<ListTransitionIn extends Transition = FlyTransition, ListTransitionOut extends Transition = FlyTransition, ChipTransitionIn extends Transition = ScaleTransition, ChipTransitionOut extends Transition = ScaleTransition> = ReturnType<__sveltets_Render<ListTransitionIn, ListTransitionOut, ChipTransitionIn, ChipTransitionOut>['slots']>;
export default class InputChip<ListTransitionIn extends Transition = FlyTransition, ListTransitionOut extends Transition = FlyTransition, ChipTransitionIn extends Transition = ScaleTransition, ChipTransitionOut extends Transition = ScaleTransition> extends SvelteComponentTyped<InputChipProps<ListTransitionIn, ListTransitionOut, ChipTransitionIn, ChipTransitionOut>, InputChipEvents<ListTransitionIn, ListTransitionOut, ChipTransitionIn, ChipTransitionOut>, InputChipSlots<ListTransitionIn, ListTransitionOut, ChipTransitionIn, ChipTransitionOut>> {
}
export {};
